{"version":3,"sources":["../index.ts","../src/Client.ts","../src/DTOs/PacketDto.ts","../src/enums/PacketTypeEnum.ts","../src/expection/RemainingLengthOversized.ts","../src/PacketMapper.ts","../src/NetAddr.ts","../src/Throttle.ts"],"sourcesContent":["import BufferOptions, { Buffer } from \"buffer\";\nimport Client from \"./src/Client.js\";\nimport Throttle from \"./src/Throttle.js\";\nimport MqttUdpPacket from \"./src/DTOs/PacketDto.js\";\nimport MqttPacketTypeEnum from \"./src/enums/PacketTypeEnum.js\";\n\ndeclare module \"buffer\" {\n  interface Buffer {\n    readUInt4(uInt4Offset: number): number;\n    writeUInt4(value: number, uInt4Offset: number): number;\n  }\n}\n\nBuffer.prototype.writeUInt4 = function (\n  this: Buffer,\n  value: number,\n  uInt4Offset: number = 0,\n) {\n  const offset = Math.floor(uInt4Offset / 2);\n  if (offset > this.length) throw new Error(\"Offset is out of bounds.\");\n  if (uInt4Offset % 2 === 0) {\n    this[offset] = (this[offset] & 0b00001111) | ((value & 0b00001111) << 4);\n  } else {\n    this[offset] = (this[offset] & 0b11110000) | (value & 0b00001111);\n  }\n  return this;\n};\n\nBuffer.prototype.readUInt4 = function (this: Buffer, uInt4Offset: number = 0) {\n  const offset = Math.floor(uInt4Offset / 2);\n  if (offset > this.length) throw new Error(\"Offset is out of bounds.\");\n  if (uInt4Offset % 2 === 0) {\n    return (this[offset] & 0b11110000) >> 4;\n  }\n  return this[offset] & 0b00001111;\n};\n\nconst MqttUdpClient = Client;\n\nexport default MqttUdpClient;\nexport { Throttle, MqttUdpPacket, MqttPacketTypeEnum };\n","import * as dgram from \"dgram\";\n\nimport MqttUdpPacket from \"./DTOs/PacketDto.js\";\nimport Throttle from \"./Throttle.js\";\nimport PacketMapper from \"./PacketMapper.js\";\nimport { randomBytes } from \"crypto\";\nimport MqttPacketTypeEnum from \"./enums/PacketTypeEnum.js\";\nimport NetAddr from \"./NetAddr.js\";\n\ntype ClientOptions = {\n  throttle: Throttle;\n  pubAckTimeoutMs?: number;\n  port?: number;\n  itemsConfigurable?: {\n    item: string;\n    functionItem: (packet: MqttUdpPacket) => void;\n  }[];\n  node?: {\n    name: string;\n    location: string;\n  };\n};\n\nclass Client {\n  private client: dgram.Socket;\n  private topicsSubscribed: string[] = [];\n  private throttle: Throttle;\n  private listenPort: number = 1883;\n  private broadcastAddress: string;\n  private readonly nodeId: string = randomBytes(8).toString(\"hex\");\n  private initiatedTime: Date = null;\n  private node: {\n    name: string;\n    location: string;\n  };\n  private packetsWaitingAck: {\n    [packetId: number]: {\n      packet: Buffer;\n      intervalId: NodeJS.Timeout;\n      retries: number;\n    };\n  } = {};\n  private pubAckTimeoutMs: number;\n\n  private functionForTopics: {\n    [topic: string]: (packet: MqttUdpPacket) => void;\n  } = {};\n  constructor(\n    {\n      throttle,\n      pubAckTimeoutMs = 5000,\n      port = 1883,\n      itemsConfigurable,\n      node,\n    }: ClientOptions,\n    callback?: () => void,\n  ) {\n    this.pubAckTimeoutMs = pubAckTimeoutMs;\n    this.listenPort = port;\n    this.broadcastAddress = NetAddr.getBroadcastAddress();\n    this.initiatedTime = new Date();\n    this.node = node || {\n      name: \"Node \" + this.nodeId,\n      location: \"Unknown\",\n    };\n    if (itemsConfigurable && itemsConfigurable.length > 0) {\n      for (const itemConfigurable of itemsConfigurable) {\n        this.topicsSubscribed.push(\n          `$SYS/conf/${this.nodeId}/${itemConfigurable.item}`,\n        );\n        this.functionForTopics[\n          `$SYS/conf/${this.nodeId}/${itemConfigurable.item}`\n        ] = itemConfigurable.functionItem;\n      }\n    }\n\n    if (throttle) {\n      this.throttle = throttle;\n    }\n\n    this.client = dgram.createSocket(\"udp4\");\n    this.client.bind(this.listenPort, callback);\n    this.client.on(\"message\", (msg, rinfo) => {\n      console.log(`Received message from ${rinfo.address}:${rinfo.port}`);\n      if (msg.length > 268435455) {\n        console.error(\"Packet too large\");\n        return;\n      }\n      if (this.throttle) {\n        this.throttle.read(() => {\n          this._handleMessage(msg, rinfo);\n        });\n      } else {\n        this._handleMessage(msg, rinfo);\n      }\n    });\n  }\n\n  public subscribe(\n    topic: string,\n    onReceive: (packet: MqttUdpPacket) => void,\n    callback: (err: Error) => void,\n  ) {\n    if (this.topicsSubscribed.includes(topic)) {\n      return callback(new Error(\"Already subscribed to this topic\"));\n    }\n    this.topicsSubscribed.push(topic);\n    this.functionForTopics[topic] = onReceive;\n  }\n\n  public sendMessage(mqttPacket: MqttUdpPacket) {\n    if (this.throttle) {\n      this.throttle.send(() => {\n        this._sendMessage(mqttPacket);\n      });\n    } else {\n      this._sendMessage(mqttPacket);\n    }\n  }\n\n  public sendPing(address: string, port: number) {\n    if (this.throttle) {\n      this.throttle.send(() => {\n        this._sendPing(address, port);\n      });\n    } else {\n      this._sendPing(address, port);\n    }\n  }\n\n  private _sendMessage(\n    mqttPacket: MqttUdpPacket,\n    port = 1883,\n    address = this.broadcastAddress,\n  ) {\n    const packet = PacketMapper.generatePacketBuffer(\n      mqttPacket,\n      this.packetsWaitingAck,\n    );\n    if (mqttPacket.getPacketId()) {\n      this.packetsWaitingAck[mqttPacket.getPacketId()] = {\n        packet,\n        intervalId: null,\n        retries: 0,\n      };\n    }\n    this.client.send(packet, port, address, (err) => {\n      if (err) {\n        console.error(err);\n      }\n    });\n    mqttPacket.getQos() > 0 &&\n      this._startPubackTimeout(\n        packet,\n        mqttPacket.getPacketId(),\n        port,\n        this.broadcastAddress,\n      );\n  }\n\n  private _handleMessage(msg: Buffer, rinfo: dgram.RemoteInfo) {\n    const packetType = msg.readUInt4(0);\n    switch (packetType) {\n      case 3:\n        this._receivePublishMessage(msg, rinfo);\n        break;\n      case 4:\n        this._receivePubAck(msg);\n        break;\n      case 8:\n        this._sendConfigurableItemsOrPredefined(msg, rinfo.address, rinfo.port);\n        break;\n      case 12:\n        this._sendPingResponse(rinfo);\n        break;\n      case 13:\n        this._receivePingResponse();\n        break;\n      default:\n        console.error(`Received unknown packet type ${packetType}`);\n    }\n  }\n\n  private _receivePublishMessage(msg: Buffer, rinfo: dgram.RemoteInfo) {\n    try {\n      console.log(\"Received publish message\");\n      const { packet, packetId } = PacketMapper.parsePublishMessage(msg);\n      const hasSubscribed = this._checkTopicAndReturnSubscribed(\n        packet.getTopic(),\n      );\n\n      if (hasSubscribed) {\n        if (packetId && packet.getQos() > 0) {\n          this._sendPubAck(packetId, rinfo);\n        }\n        this.functionForTopics[hasSubscribed](packet);\n      }\n    } catch (error) {\n      console.error(\"Error processing publish message:\", error);\n    }\n  }\n\n  private _receivePubAck(msg: Buffer) {\n    const packetId = msg.readUInt16BE(2);\n    if (this.packetsWaitingAck[packetId]) {\n      clearInterval(this.packetsWaitingAck[packetId].intervalId);\n      delete this.packetsWaitingAck[packetId];\n    } else {\n      console.error(\"Received PUBACK for unknown packet ID\");\n    }\n  }\n\n  private _receivePingResponse() {\n    console.log(\"Ping response received\");\n  }\n\n  private _sendPingResponse(rinfo: dgram.RemoteInfo) {\n    const sendPacket = () => {\n      const packet = Buffer.from([0xd0, 0x00]);\n      this.client.send(packet, rinfo.port, rinfo.address, (err) => {\n        if (err) {\n          console.error(err);\n        }\n      });\n    };\n\n    if (this.throttle) {\n      this.throttle.send(sendPacket);\n    } else {\n      sendPacket();\n    }\n  }\n\n  private _sendPing(address: string, port: number) {\n    const packet = Buffer.from([0xc0, 0x00]);\n    this.client.send(packet, port, address, (err) => {\n      if (err) {\n        console.error(err);\n      }\n    });\n  }\n\n  private _sendPubAck(packetId: number, rinfo: dgram.RemoteInfo) {\n    const packet = Buffer.alloc(4);\n    packet.writeUInt8(0x40, 0);\n    packet.writeUInt8(0x02, 1);\n    packet.writeUInt16BE(packetId, 2);\n    this.client.send(packet, rinfo.port, rinfo.address, (err) => {\n      if (err) {\n        console.error(err);\n        return;\n      }\n    });\n  }\n\n  private _startPubackTimeout(\n    packet: Buffer,\n    packetId: number,\n    port: number,\n    ip: string,\n  ) {\n    const timeout = setTimeout(() => {\n      if (this.packetsWaitingAck[packetId]) {\n        const secondNibble = packet.readUInt4(1);\n        const setDup = secondNibble | 0x08;\n        packet.writeUInt4(setDup, 1);\n        this.client.send(packet, port, ip, (err) => {\n          if (err) {\n            console.error(err);\n            return;\n          }\n        });\n        if (this.packetsWaitingAck[packetId].retries < 5) {\n          this._startPubackTimeout(packet, packetId, port, ip);\n          this.packetsWaitingAck[packetId].retries++;\n        }\n        this.packetsWaitingAck[packetId].intervalId = null;\n      }\n    }, this.pubAckTimeoutMs);\n    this.packetsWaitingAck[packetId].intervalId = timeout;\n  }\n\n  private _checkTopicAndReturnSubscribed(topic: string): string | null {\n    // Wildcard check\n    for (const subscribedTopic of this.topicsSubscribed) {\n      if (this._matchTopic(subscribedTopic, topic)) {\n        return subscribedTopic;\n      }\n    }\n    return null;\n  }\n\n  private _matchTopic(subscribedTopic: string, topic: string): boolean {\n    if (subscribedTopic === topic) return true;\n\n    const subscribedLevels = subscribedTopic.split(\"/\");\n    const topicLevels = topic.split(\"/\");\n\n    for (let i = 0; i < subscribedLevels.length; i++) {\n      const subLevel = subscribedLevels[i];\n\n      // Se acabaram os níveis do tópico, mas não do tópico inscrito\n      if (i >= topicLevels.length) {\n        if (subLevel === \"#\") {\n          return true;\n        }\n        return null;\n      }\n\n      const topicLevel = topicLevels[i];\n\n      if (subLevel === \"#\") {\n        return true; // \"#\" corresponde a todos os níveis restantes\n      } else if (subLevel !== \"+\" && subLevel !== topicLevel) {\n        return false; // Nível não corresponde e não é um curinga\n      }\n    }\n\n    // Se `topic` tem mais níveis do que `subscribedTopic`\n    if (topicLevels.length > subscribedLevels.length) {\n      if (subscribedLevels[subscribedLevels.length - 1] !== \"#\") {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  private _sendConfigurableItemsOrPredefined(\n    msg: Buffer,\n    address: string,\n    port: number,\n  ) {\n    const { packet: receivedPacket } = PacketMapper.parsePublishMessage(msg);\n    const topic = receivedPacket.getTopic();\n    const isPredefinedTopicString =\n      this._verifyPredefinedTopicAndSendResponseText(topic);\n    if (isPredefinedTopicString !== \"UNKNOWN\") {\n      const packet = PacketMapper.generatePacketBuffer(\n        new MqttUdpPacket({\n          topic,\n          message: isPredefinedTopicString,\n          qos: 0,\n          packetType: MqttPacketTypeEnum.PUBLISH,\n        }),\n        {},\n      );\n      this.client.send(packet, port, address, (err) => {\n        if (err) console.error(err);\n      });\n      return;\n    }\n    for (let topicSubscribed of this.topicsSubscribed) {\n      const topic = topicSubscribed.split(\"/\");\n      if (\n        topic[0] === \"$SYS\" &&\n        topic[1] === \"conf\" &&\n        topic[2] === this.nodeId\n      ) {\n        const packet = PacketMapper.generatePacketBuffer(\n          new MqttUdpPacket({\n            topic: topicSubscribed,\n            message: \"NEED_CONFIG\",\n            qos: 0,\n            packetType: MqttPacketTypeEnum.PUBLISH,\n          }),\n          {},\n        );\n        this.client.send(packet, 1883, this.broadcastAddress, (err) => {\n          if (err) console.error(err);\n        });\n      }\n    }\n  }\n  private _verifyPredefinedTopicAndSendResponseText(topic: string) {\n    switch (topic) {\n      case \"$SYS/conf/${this.nodeId}/info/ver\":\n        return \"1.0.0\";\n      case \"$SYS/conf/${this.nodeId}/info/soft\":\n        return \"NODEJS-MQTT-UDP\";\n      case \"$SYS/conf/${this.nodeId}/node/name\":\n        return this.node.name;\n      case \"$SYS/conf/${this.nodeId}/node/location\":\n        return this.node.location;\n      case \"$SYS/conf/${this.nodeId}/net/mac\":\n        return NetAddr.getMacAddress();\n      case \"$SYS/conf/${this.nodeId}/net/ip\":\n        return NetAddr.getLocalIp();\n      case \"$SYS/conf/${this.nodeId}/info/uptime\":\n        const requestedDate = new Date();\n        const uptime = requestedDate.getTime() - this.initiatedTime.getTime();\n        const uptimeTextFormat = new Date(uptime).toISOString();\n        return uptimeTextFormat;\n      default:\n        return \"UNKNOWN\";\n    }\n  }\n}\n\nexport default Client;\n","import MqttPacketTypeEnum from \"../enums/PacketTypeEnum.js\";\nimport dgram from \"dgram\";\n\nclass MqttUdpPacket {\n  private packetType: MqttPacketTypeEnum;\n  private topic: string;\n  private message: string;\n  private qos: number;\n  private rinfo: dgram.RemoteInfo;\n  private packetId: number;\n\n  constructor({\n    packetType,\n    topic,\n    message,\n    qos,\n  }: {\n    packetType?: MqttPacketTypeEnum;\n    topic?: string;\n    message?: string;\n    qos?: number;\n  }) {\n    this.packetType = packetType;\n    this.topic = topic;\n    this.message = message;\n    this.qos = qos || 0;\n  }\n  // Getters\n  getPacketType(): MqttPacketTypeEnum {\n    return this.packetType;\n  }\n  getTopic(): string {\n    return this.topic;\n  }\n  getMessage(): string {\n    return this.message;\n  }\n  getQos(): number {\n    return this.qos;\n  }\n  getRinfo(): dgram.RemoteInfo {\n    return this.rinfo;\n  }\n  getPacketId(): number {\n    return this.packetId;\n  }\n\n  // Setters\n  setPacketType(packetType: MqttPacketTypeEnum): void {\n    this.packetType = packetType;\n  }\n  setTopic(topic: string): void {\n    this.topic = topic;\n  }\n  setMessage(message: string): void {\n    this.message = message;\n  }\n  setQos(qos: number): void {\n    this.qos = qos;\n  }\n  setRinfo(rinfo: dgram.RemoteInfo): void {\n    this.rinfo = rinfo;\n  }\n  setPacketId(packetId: number): void {\n    if (packetId > 65535 || packetId < 1) {\n      throw new Error(\"Packet ID must be between 1 and 65535\");\n    }\n    this.packetId = packetId;\n  }\n}\nexport default MqttUdpPacket;\n","enum MqttPacketTypeEnum {\n  CONNECT = 1,\n  CONNACK = 2,\n  PUBLISH = 3,\n  PUBACK = 4,\n  PUBREC = 5,\n  PUBREL = 6,\n  PUBCOMP = 7,\n  SUBSCRIBE = 8,\n  SUBACK = 9,\n  UNSUBSCRIBE = 10,\n  UNSUBACK = 11,\n  PINGREQ = 12,\n  PINGRESP = 13,\n  DISCONNECT = 14,\n}\n\nexport default MqttPacketTypeEnum;\n","class RemainingLengthOversized extends Error {\n  constructor() {\n    super(\"Remaining length is oversized\");\n  }\n}\n\nexport default RemainingLengthOversized;\n","import MqttUdpPacket from \"./DTOs/PacketDto.js\";\nimport MqttPacketTypeEnum from \"./enums/PacketTypeEnum.js\";\nimport RemainingLengthOversized from \"./expection/RemainingLengthOversized.js\";\n\ntype PacketWaitingAck = {\n  [packetId: number]: {\n    packet: Buffer;\n    intervalId: NodeJS.Timeout;\n    retries: number;\n  };\n};\n\nclass PacketMapper {\n  private static getQosFixedHeader(qos: number) {\n    // Separing in a different function to implement retain and dup if needed later;\n\n    if (qos > 2) {\n      throw new Error(\"QoS level must be between 0 and 2\");\n    }\n    return qos << 1;\n  }\n\n  private static generatePacketId(packetsWaitingAck: PacketWaitingAck) {\n    const generatedId = Math.floor(Math.random() * 65535) + 1;\n    if (packetsWaitingAck[generatedId]) {\n      return this.generatePacketId(packetsWaitingAck);\n    }\n    return generatedId;\n  }\n\n  public static generatePacketBuffer(\n    mqttPacket: MqttUdpPacket,\n    packetsWaitingAck: PacketWaitingAck,\n  ): Buffer {\n    const packetIdLength = mqttPacket.getQos() ? 2 : 0;\n\n    const topicBuffer = Buffer.from(mqttPacket.getTopic());\n    const messageBuffer = Buffer.from(mqttPacket.getMessage());\n    const payloadLength =\n      topicBuffer.length + messageBuffer.length + 2 + packetIdLength;\n    const bytesPayloadLength = this._generateVariableByteInteger(payloadLength);\n\n    // Setting the buffer\n    const packet = Buffer.alloc(1 + bytesPayloadLength.length + payloadLength);\n\n    packet.writeUInt4(3, 0);\n    packet.writeUInt4(this.getQosFixedHeader(mqttPacket.getQos()), 1);\n    bytesPayloadLength.copy(packet, 1);\n    packet.writeUInt16BE(topicBuffer.length, 1 + bytesPayloadLength.length);\n    topicBuffer.copy(packet, bytesPayloadLength.length + 3);\n\n    let offset = 3 + bytesPayloadLength.length + topicBuffer.length;\n    if (packetIdLength) {\n      mqttPacket.setPacketId(this.generatePacketId(packetsWaitingAck));\n      packet.writeUInt16BE(mqttPacket.getPacketId(), offset);\n      offset += 2;\n    }\n    messageBuffer.copy(packet, offset);\n\n    return packet;\n  }\n\n  private static _generateVariableByteInteger(value: number): Buffer {\n    const uint8Array = new Uint8Array(4);\n    let remainingValue = value;\n    let byte = 0;\n    let i = 0;\n    do {\n      byte = remainingValue % 128;\n      remainingValue = Math.floor(remainingValue / 128);\n      if (remainingValue > 0) {\n        byte = byte | 0x80;\n      }\n      uint8Array[i] = byte;\n      i++;\n    } while (remainingValue > 0);\n    return Buffer.from(uint8Array.slice(0, i));\n  }\n\n  //reader\n  private static readVariableBytePayloadLength(\n    packet: Buffer,\n  ): [number, number] {\n    let bytesRead = 0;\n    let multiplier = 1;\n    let result = 0;\n    let byte = 0;\n\n    do {\n      if (bytesRead >= 4) {\n        throw new RemainingLengthOversized();\n      }\n      byte = packet.readUInt8(bytesRead + 1);\n      result += (byte & 0x7f) * multiplier;\n      multiplier *= 128;\n      bytesRead++;\n    } while ((byte & 0x80) !== 0);\n\n    return [result, bytesRead];\n  }\n\n  public static parsePublishMessage(msg: Buffer): {\n    packet: MqttUdpPacket;\n    packetId?: number;\n  } {\n    if (msg.length < 4) {\n      throw new Error(\"Invalid packet\");\n    }\n    const [payloadLength, bytesRead] = this.readVariableBytePayloadLength(msg);\n\n    const qos = (msg.readUInt4(1) >> 1) & 0x03;\n    if (qos > 2) {\n      throw new Error(\"Invalid QoS level\");\n    }\n\n    const topicLengthHi = msg.readUint8(1 + bytesRead);\n    const topicLengthLo = msg.readUint8(2 + bytesRead);\n    const topicLength = (topicLengthHi << 8) | topicLengthLo;\n\n    let startRead = 3 + bytesRead;\n\n    const topic = msg.toString(\"utf-8\", startRead, startRead + topicLength);\n\n    startRead += topicLength;\n\n    let packetId: number = null;\n    if (qos > 0) {\n      packetId = msg.readUInt16BE(startRead);\n      startRead += 2;\n    }\n    const messageLength = payloadLength - startRead + 2;\n    const message = msg.toString(\"utf-8\", startRead, startRead + messageLength);\n\n    const packet = new MqttUdpPacket({\n      packetType: MqttPacketTypeEnum.PUBLISH,\n      topic,\n      message,\n      qos,\n    });\n\n    if (packetId && qos > 0) {\n      packet.setPacketId(packetId);\n    }\n\n    return { packet, packetId };\n  }\n}\n\nexport default PacketMapper;\n","import { networkInterfaces } from \"os\";\n\nclass NetAddr {\n  private static readonly ignoreInterfaces: string[] = [\n    \"docker0\",\n    \"vEthernet\",\n    \"vmnet\",\n  ];\n  public static getLocalIp(): string {\n    const localInterfaces = this.findLocalsNetworkInterfaces();\n    return localInterfaces[0].address;\n  }\n  public static getNetMask(): string {\n    const localInterfaces = this.findLocalsNetworkInterfaces();\n    return localInterfaces[0].netmask;\n  }\n  public static getMacAddress(): string {\n    const localInterfaces = this.findLocalsNetworkInterfaces();\n    return localInterfaces[0].mac;\n  }\n  public static getBroadcastAddress(): string {\n    const localInterfaces = this.findLocalsNetworkInterfaces();\n    const ip = localInterfaces[0].address;\n    const subnetMask = localInterfaces[0].netmask;\n    function ipToBinary(ipPart: string) {\n      return (\"00000000\" + parseInt(ipPart, 10).toString(2)).slice(-8);\n    }\n\n    function binaryToIp(binaryPart: string) {\n      return parseInt(binaryPart, 2).toString(10);\n    }\n\n    const ipBinary = ip.split(\".\").map(ipToBinary).join(\"\");\n    const maskBinary = subnetMask.split(\".\").map(ipToBinary).join(\"\");\n\n    const broadcastBinary = ipBinary\n      .split(\"\")\n      .map((bit, index) => (maskBinary[index] === \"1\" ? bit : \"1\"))\n      .join(\"\");\n\n    const broadcastIp = broadcastBinary\n      .match(/.{1,8}/g)\n      .map(binaryToIp)\n      .join(\".\");\n    return broadcastIp;\n  }\n\n  public static findLocalsNetworkInterfaces(): {\n    address: string;\n    mac: string;\n    netmask: string;\n  }[] {\n    const addresses = Object.entries(networkInterfaces())\n      .filter(([name]) => !this.ignoreInterfaces.includes(name))\n      .map(([_, addressList]) => addressList)\n      .flat();\n\n    const localIpAddresses = addresses\n      .filter(\n        (addressInfo) => addressInfo.family === \"IPv4\" && !addressInfo.internal,\n      )\n      .map((addressInfo) => {\n        return {\n          address: addressInfo.address,\n          mac: addressInfo.mac,\n          netmask: addressInfo.netmask,\n        };\n      });\n    return localIpAddresses;\n  }\n}\n\nexport default NetAddr;\n","class Throttle {\n  private packetsPerTime: number;\n  private ms: number;\n  private packetsCount: number = 0;\n  private packetsCountRead: number = 0;\n  private timeout: NodeJS.Timeout | null = null;\n  private queuedPacketsToSend: (() => void)[] = [];\n  private queuedPacketsToRead: (() => void)[] = [];\n\n  constructor(packetsPerTime: number, ms: number) {\n    this.packetsPerTime = packetsPerTime || 10;\n    this.ms = ms || 1000;\n  }\n\n  public send(executeFunction: () => void) {\n    if (!this.timeout) {\n      this._startTimeout();\n    }\n\n    if (this.packetsCount < this.packetsPerTime) {\n      this.packetsCount++;\n      executeFunction();\n    } else {\n      this.queuedPacketsToSend.push(executeFunction);\n    }\n  }\n\n  private _startTimeout() {\n    this.timeout = setTimeout(() => {\n      this.packetsCount = 0;\n      this.packetsCountRead = 0;\n      this.timeout = null;\n      if (this.queuedPacketsToSend.length > 0) {\n        this._startTimeout();\n        this.send(this.queuedPacketsToSend.shift()!);\n      }\n      if (this.queuedPacketsToRead.length > 0) {\n        this._startTimeout();\n        this.read(this.queuedPacketsToRead.shift()!);\n      }\n    }, this.ms);\n  }\n  public read(executeFunction: () => void) {\n    if (!this.timeout) {\n      this._startTimeout();\n    }\n\n    if (this.packetsCountRead < this.packetsPerTime) {\n      this.packetsCountRead++;\n      executeFunction();\n    } else {\n      this.queuedPacketsToRead.push(executeFunction);\n    }\n  }\n}\n\nexport default Throttle;\n"],"mappings":"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","names":["Buffer","MqttPacketTypeEnum","topic","Buffer"]}